--------HOTEL- MANAGEMENT IN SQL PROJECT---------------

Let's design a mini project for a Hotel Management System using SQL. This project will involve creating a database to manage hotel rooms, customers, reservations, and staff.

Project Overview:

1. Database Design:
  .Create tables for 'Rooms', 'Customers',' Reservations', and 'Staff'.

2. SQL Operations:
    .Insert, update, delete, and query data from these tables.
     Implement complex queries, joins, and aggregations.

Step 1: Define the Tables

 1. Rooms Table:

    'RoomID' (Primary Key)
    # 'RoomNumber'
    # 'RoomType' (e.g., Single, Double, Suite)
    #  PricePerNight
    # Availability (e.g., Available, Occupied, Maintenance)
    # Customers Table:

2.CustomerID (Primary Key)
  # FirstName
  # LastName
  # PhoneNumber
  # Email
  # Address
3. Reservations Table:

  # ReservationID (Primary Key)
  # CustomerID (Foreign Key referencing Customers.CustomerID)
  # RoomID (Foreign Key referencing Rooms.RoomID)
  # CheckInDate
  # CheckOutDate
  # TotalAmount
  # Staff Table:

4.  StaffID (Primary Key)
  # FirstName
  # LastName
  # Position (e.g., Manager, Housekeeping, Receptionist)
  # PhoneNumber
  # Email
  # Salary

Step 2: Create the Database and Tables
  Here is how you can create the database and tables using SQL:

CREATE DATABASE HotelManagement;

 USE HotelManagement;

 CREATE TABLE Rooms (
     RoomID INT PRIMARY KEY AUTO_INCREMENT,
     RoomNumber INT UNIQUE,
     RoomType VARCHAR(50),
     PricePerNight DECIMAL(10, 2),
     Availability VARCHAR(20)
 );

 CREATE TABLE Customers (
     CustomerID INT PRIMARY KEY AUTO_INCREMENT,
     FirstName VARCHAR(100),
     LastName VARCHAR(100),
     PhoneNumber VARCHAR(15),
     Email VARCHAR(100),
     Address VARCHAR(200)
 );

 CREATE TABLE Reservations (
     ReservationID INT PRIMARY KEY AUTO_INCREMENT,
     CustomerID INT,
     RoomID INT,
     CheckInDate DATE,
     CheckOutDate DATE,
     TotalAmount DECIMAL(10, 2),
     FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
     FOREIGN KEY (RoomID) REFERENCES Rooms(RoomID)
 );

 CREATE TABLE Staff (
     StaffID INT PRIMARY KEY AUTO_INCREMENT,
     FirstName VARCHAR(100),
     LastName VARCHAR(100),
     Position VARCHAR(50),
     Email VARCHAR(100),
     Salary DECIMAL(10, 2)
 );


Step 3: Insert Sample Data
    Insert some sample data into the tables:


-- Inserting Rooms

 INSERT INTO Rooms (RoomNumber, RoomType, PricePerNight, Availability)
 VALUES
 (101, 'Single', 100.00, 'Available'),
 (102, 'Double', 150.00, 'Occupied'),
 (201, 'Suite', 300.00, 'Available');

-- Inserting Customers
 INSERT INTO Customers (FirstName, LastName, PhoneNumber, Email, Address)
 VALUES
 ('John', 'Doe', '1234567890', 'john.doe@example.com', '123 Elm Street'),
 ('Alice', 'Smith', '0987654321', 'alice.smith@example.com', '456 Oak Avenue');

-- Inserting Reservations
 INSERT INTO Reservations (CustomerID, RoomID, CheckInDate, CheckOutDate, TotalAmount)
 VALUES
 (1, 101, '2023-09-01', '2023-09-05', 400.00),
 (2, 102, '2023-09-02', '2023-09-06', 600.00);

-- Inserting Staff
 INSERT INTO Staff (FirstName, LastName, Position, PhoneNumber, Email, Salary)
 VALUES
 ('Michael', 'Brown', 'Manager', '1112223333', 'michael.brown@example.com', 50000.00),
 ('Sara', 'Davis', 'Housekeeping', '4445556666', 'sara.davis@example.com', 25000.0);

Step 4: Perform Queries

1. Join Query: List all reservations with customer names, room numbers, and total amounts.

 SELECT 
     Reservations.ReservationID,
     Customers.FirstName AS CustomerFirstName,
     Customers.LastName AS CustomerLastName,
     Rooms.RoomNumber,
     Reservations.CheckInDate,
     Reservations.CheckOutDate,
    Reservations.TotalAmount
 FROM 
     Reservations
 JOIN 
     Customers ON Reservations.CustomerID = Customers.CustomerID
 JOIN 
     Rooms ON Reservations.RoomID = Rooms.RoomID;

2. Aggregation Query: Calculate the total revenue generated by each room.

 SELECT 
     Rooms.RoomNumber,
    SUM(Reservations.TotalAmount) AS TotalRevenue
 FROM 
     Rooms
 JOIN 
     Reservations ON Rooms.RoomID = Reservations.RoomID
 GROUP BY 
     Rooms.RoomNumber;

3. Update Query: Update the availability status of a room.

  UPDATE Rooms
  SET Availability = 'Available'
  WHERE RoomID = 2;

 4.Delete Query: Delete a reservation from the database.

   DELETE FROM Reservations
   WHERE ReservationID = 1;

Step 5: Extend the Project
  You can further extend this project by:

  . Adding more tables like Services (e.g., room service, spa, etc.) and linking them to reservations.
  . Implementing triggers to automatically update room availability based on reservations.
  . Creating stored procedures to handle common operations like checking room availability or calculating the total bill.
  . Would you like to explore any specific part of this project in more detail?

































